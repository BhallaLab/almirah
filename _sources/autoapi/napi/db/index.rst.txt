:py:mod:`napi.db`
=================

.. py:module:: napi.db

.. autoapi-nested-parse::

   Database and DataFrame functionality for data access and manipulation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   napi.db.DBManager



Functions
~~~~~~~~~

.. autoapisummary::

   napi.db.get_db
   napi.db.get_transform
   napi.db.common_rows
   napi.db.migrate
   napi.db.set_dtype
   napi.db.transform
   napi.db.validate



.. py:class:: DBManager(db_path=None)


   Interface to connect with db and perform operations.

   .. py:property:: session


   .. py:property:: connection


   .. py:method:: _init_metadata()


   .. py:method:: build_column(name, dtype, **kwargs)

      Build SQLalchemy Column object given column description.


   .. py:method:: build_constraint(cols, links)

      Build SQLalchmy constraint objects given links.


   .. py:method:: create_table(description)

      Create or extend table in db given the description.


   .. py:method:: get_primary(table)

      Returns priamry keys for table.


   .. py:method:: get_type(dtype, default_length=250)

      Return supported SQLalchemy type equivalent of provided dtype string.

      Parameters
      ----------
      dtype: str
          Supported dtype string representation.

      default_length: int, optional
          Default length of string. Used if required by db backend.


   .. py:method:: get_table(table, cols=None)

      Retrieve table records in db as a DataFrame.

      Parameters
      ----------
      table : str
          Table in database from which to retrieve records.

      cols : list of str
          Column names to select from table.


   .. py:method:: to_table(df, table, drop_na=None, check_dups=True, resolve_dups=False, check_fks=True, resolve_fks=False, if_exists='append', index=False, insert_method=None, **kwargs)

      Write records in DataFrame to a table.

      Parameters
      ----------
      df : pandas.DataFrame
          DataFrame containing records.

      table : str
          Table in database into which the records will be inserted.

      drop_na : list of df column names, default None
          If provided, records with na in all given columns is dropped.

      check_dups : bool, default True
          Check for duplicates in records.

      resolve_dups : [False, 'first', 'last'], default False
          Resolution method for duplicates if found.

      check_fks : bool, default False
          Check if foreign keys present in parent.

      resolve_fks : bool, default False
          Attempt to resolve missing foreign keys by inserting to parent.

      if_exists : ['append', 'replace', 'fail'], default 'append'
          Insert behavior in case table exists.

          * 'append' : Insert new values to the existing table.
          * 'replace' : Drop the table before inserting new values.
          * 'fail' : Raise a ValueError if table exists.

      index : bool, default False
          Write DataFrame index as a column. Uses index_label as the
          column name in the table.

      insert_method : {None, 'multi', callable}, optional
          Controls the SQL insertion clause used.

          * None : Uses standard SQL INSERT clause (one per row).
          * ‘multi’: Pass multiple values in a single INSERT clause.
          * callable with signature ``(pd_table, conn, keys, data_iter)``.

          Details and a sample callable implementation can be found
          in the pandas section `insert method`_.

      kwargs : key, value mappings
          Other keyword arguments are passed down to
          `pandas.DataFrame.to_sql()`_

      Returns
      -------
      rows : None or int
          Number of rows affected by to_sql. None is returned if the
          callable passed into `insert_method` does not return an
          integer number of rows.

      Raises
      ------
      ValueError
          * When values provided are not sufficient for insert operation.
          * When the table already exists and `if_exists` is 'fail'.

      OperationalError
          * Most likely there are duplicates records in the
            DataFrame. Other reasons are related to the database
            operation and are detailed in sqlalchemy section
            `OperationalError`_.

      .. _insert method: https://pandas.pydata.org/docs/user_guide/io.html#io-sql-method
      .. _pandas.DataFrame.to_sql(): https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_sql.html
      .. _OperationalError: https://docs.sqlalchemy.org/en/20/errors.html#operationalerror



   .. py:method:: resolve_dups(df, table, resolve=False)

      Resolve duplicate primary keys in DataFrame.

      Parameters
      ----------
      df : pandas.DataFrame
          DataFrame to check for duplicate records.
      table : str
          Table the records will be inserted into.
      resolve : [False, 'first', 'last'], default False
          Determines resolution method.

          * False : Mark all duplicates as False.
          * 'first' : Mark duplicates as False except for first occurence.
          * 'last' : Mark duplicates as False except for last occurence.

      Returns
      -------
      mask : pandas.Series
          Series of booleans showing whether each record in the
          Dataframe is not a duplicate.

      Raises
      ------
      ValueError
          When primary key duplicates are found and `resolve` is True.



   .. py:method:: resolve_fks(df, table, resolve=False)

      Parameters
      ----------
      df : pandas.DataFrame
          Non-duplicated records to be checked.
      table : str
          Table the records will be inserted into.
      resolve : bool, optional
          If True, attempt to resolve missing parent records by inserting.

      Returns
      -------
      mask : pandas.Series
           Series of booleans showing whether each record in the
           DataFrame has all required parent records.

      Warnings
      --------
      Resolution fails with a ValueError when a foreign key
      constraint on a table does not reference all the columns that
      provide the required values to insert records into the parent
      table.



   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: get_db(db_path)

   Returns SQLalchemy engine for provided URL.


.. py:function:: get_transform(transform)

   Returns pandas method equivalent of transform string.


.. py:function:: common_rows(child, parent, child_on=None, parent_on=None)

   Check whether each record in a DataFrame is contained in another.


.. py:function:: migrate(src, target, mapping, dry_run=False, na_values=None, dtype_kws=None, **kwargs)

   Transforms and migrates records from one db to another.

   Parameters
   ----------
   src: str
       SQLAlchemy database URL of database from which data is
       transferred.

   target: str
       SQLAlchemy database URL of database to which data is
       transferred.

   mapping: dict
       Dictionary providing information on column mappings, type,
       transformations, and validation checks.

   dry_run: bool
       If dry run, no records are inserted into target and tables are
       not created, but errors and invalid records are logged.

   na_values: list, optional
       List of values to be considered as record not available. By
       default, the values '', 'None', 'NONE', 'NA', and 'Not Applicable'
       are considered.

   dtype_kws : dict, optional
       Key, value pairs that will be passed to
       :meth:`napi.db.set_dtype()`.

   kwargs : key, value mappings
       Other keyword arguments are passed down to
       :meth:`napi.db.to_table`.


.. py:function:: set_dtype(series, dtype, **kwargs)

   Set dtype of series.

   Parameters
   ----------
   series: pandas.Series
       Series for which the dtype has to set.

   dtype: str
       Supported dtype to which the series will be converted.

   kwargs: key, value mappings
       Other keyword arguments are passed down to `pandas.to_datetime()`_
       if the dtype is 'datetime'.


.. py:function:: transform(series, dtype_kws=None, **kwargs)

   Transform series and return with appropriate datatype.


.. py:function:: validate(series, **kwargs)

   Validate series and return mask.


